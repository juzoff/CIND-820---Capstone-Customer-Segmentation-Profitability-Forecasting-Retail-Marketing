{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNmcbMxKNcA+VC8FSj/EJBK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Importing csv file"],"metadata":{"id":"TxAJOsaY4qzy"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"-dG796i63KLC","executionInfo":{"status":"ok","timestamp":1750189868760,"user_tz":240,"elapsed":1130,"user":{"displayName":"Jivko Uzoff","userId":"13489242111202320155"}}},"outputs":[],"source":["from pandas import read_csv\n","import pandas as pd\n","\n","# Specify the encoding as detected ('ascii')\n","train_data = pd.read_csv('/content/srsstat_train_data.csv', encoding='ascii')  # Updated encoding to 'ascii'\n","\n","test_data = pd.read_csv('/content/srsstat_test_data.csv', encoding='ascii')  # Updated encoding to 'ascii'"]},{"cell_type":"markdown","source":["## Seeing attributes of dataset"],"metadata":{"id":"I8V_iDJl4w--"}},{"cell_type":"code","source":["train_data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HMAJUB8M3yMU","executionInfo":{"status":"ok","timestamp":1750189868834,"user_tz":240,"elapsed":77,"user":{"displayName":"Jivko Uzoff","userId":"13489242111202320155"}},"outputId":"4cf1ec19-103b-4cdd-d870-6f75dfef962a"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 21000 entries, 0 to 20999\n","Data columns (total 87 columns):\n"," #   Column                     Non-Null Count  Dtype  \n","---  ------                     --------------  -----  \n"," 0   customer_id                21000 non-null  int64  \n"," 1   age                        21000 non-null  int64  \n"," 2   gender                     21000 non-null  object \n"," 3   income_bracket             21000 non-null  object \n"," 4   loyalty_program            21000 non-null  object \n"," 5   membership_years           21000 non-null  int64  \n"," 6   churned                    21000 non-null  object \n"," 7   marital_status             21000 non-null  object \n"," 8   number_of_children         21000 non-null  int64  \n"," 9   education_level            21000 non-null  object \n"," 10  occupation                 21000 non-null  object \n"," 11  transaction_id             21000 non-null  int64  \n"," 12  product_id                 21000 non-null  int64  \n"," 13  product_category           21000 non-null  object \n"," 14  quantity                   21000 non-null  int64  \n"," 15  unit_price                 21000 non-null  float64\n"," 16  discount_applied           21000 non-null  float64\n"," 17  payment_method             21000 non-null  object \n"," 18  store_location             21000 non-null  object \n"," 19  transaction_hour           21000 non-null  int64  \n"," 20  day_of_week                21000 non-null  object \n"," 21  week_of_year               21000 non-null  int64  \n"," 22  month_of_year              21000 non-null  int64  \n"," 23  avg_purchase_value         21000 non-null  float64\n"," 24  purchase_frequency         21000 non-null  object \n"," 25  avg_discount_used          21000 non-null  float64\n"," 26  preferred_store            21000 non-null  object \n"," 27  online_purchases           21000 non-null  int64  \n"," 28  in_store_purchases         21000 non-null  int64  \n"," 29  avg_items_per_transaction  21000 non-null  float64\n"," 30  avg_transaction_value      21000 non-null  float64\n"," 31  total_returned_items       21000 non-null  int64  \n"," 32  total_returned_value       21000 non-null  float64\n"," 33  total_sales_over_lastyear  21000 non-null  float64\n"," 34  total_transactions         21000 non-null  int64  \n"," 35  total_items_purchased      21000 non-null  int64  \n"," 36  total_discounts_received   21000 non-null  float64\n"," 37  avg_spent_per_category     21000 non-null  float64\n"," 38  max_single_purchase_value  21000 non-null  float64\n"," 39  min_single_purchase_value  21000 non-null  float64\n"," 40  product_name               21000 non-null  object \n"," 41  product_brand              21000 non-null  object \n"," 42  product_rating             21000 non-null  float64\n"," 43  product_review_count       21000 non-null  int64  \n"," 44  product_stock              21000 non-null  int64  \n"," 45  product_return_rate        21000 non-null  float64\n"," 46  product_size               21000 non-null  object \n"," 47  product_weight             21000 non-null  float64\n"," 48  product_color              21000 non-null  object \n"," 49  product_material           21000 non-null  object \n"," 50  product_shelf_life         21000 non-null  int64  \n"," 51  promotion_id               21000 non-null  int64  \n"," 52  promotion_type             21000 non-null  object \n"," 53  promotion_effectiveness    21000 non-null  object \n"," 54  promotion_channel          21000 non-null  object \n"," 55  promotion_target_audience  21000 non-null  object \n"," 56  customer_zip_code          21000 non-null  int64  \n"," 57  customer_city              21000 non-null  object \n"," 58  customer_state             21000 non-null  object \n"," 59  store_zip_code             21000 non-null  int64  \n"," 60  store_city                 21000 non-null  object \n"," 61  store_state                21000 non-null  object \n"," 62  distance_to_store          21000 non-null  float64\n"," 63  holiday_season             21000 non-null  object \n"," 64  season                     21000 non-null  object \n"," 65  weekend                    21000 non-null  object \n"," 66  customer_support_calls     21000 non-null  int64  \n"," 67  email_subscriptions        21000 non-null  object \n"," 68  app_usage                  21000 non-null  object \n"," 69  website_visits             21000 non-null  int64  \n"," 70  social_media_engagement    21000 non-null  object \n"," 71  days_since_last_purchase   21000 non-null  int64  \n"," 72  high_value_purchase        21000 non-null  bool   \n"," 73  high_value_quantity        21000 non-null  bool   \n"," 74  transaction_month          21000 non-null  int64  \n"," 75  transaction_year           21000 non-null  int64  \n"," 76  product_expiry_date_month  21000 non-null  int64  \n"," 77  product_expiry_date_year   21000 non-null  int64  \n"," 78  product_manufacture_month  21000 non-null  int64  \n"," 79  product_manufacture_year   21000 non-null  int64  \n"," 80  promotion_end_month        21000 non-null  int64  \n"," 81  promotion_end_year         21000 non-null  int64  \n"," 82  last_purchase_month        21000 non-null  int64  \n"," 83  last_purchase_year         21000 non-null  int64  \n"," 84  promotion_start_month      21000 non-null  int64  \n"," 85  promotion_start_year       21000 non-null  int64  \n"," 86  cluster                    21000 non-null  int64  \n","dtypes: bool(2), float64(16), int64(37), object(32)\n","memory usage: 13.7+ MB\n"]}]},{"cell_type":"markdown","source":["# RQ2 - Statistical Analysis"],"metadata":{"id":"p74i0wRo47vC"}},{"cell_type":"markdown","source":["## Chi-Square - Strength Between Target and Categorical Attributes"],"metadata":{"id":"2EMybmDX4-i-"}},{"cell_type":"code","source":["import pandas as pd\n","from scipy.stats import chi2_contingency\n","import numpy as np\n","\n","# Verify 'cluster' column exists in train_data\n","if 'cluster' not in train_data.columns:\n","    raise ValueError(\"Column 'cluster' not found in train_data! Available columns: \" + str(list(train_data.columns)))\n","\n","# Updated list of categorical columns based on provided dataset\n","categorical_columns = [\n","    'gender', 'income_bracket', 'loyalty_program', 'churned', 'marital_status',\n","    'education_level', 'occupation', 'product_category', 'payment_method',\n","    'store_location', 'day_of_week', 'purchase_frequency', 'preferred_store',\n","    'product_name', 'product_brand', 'product_size', 'product_color',\n","    'product_material', 'promotion_type', 'promotion_effectiveness',\n","    'promotion_channel', 'promotion_target_audience', 'customer_city',\n","    'customer_state', 'store_city', 'store_state', 'holiday_season', 'season',\n","    'weekend', 'email_subscriptions', 'app_usage', 'social_media_engagement',\n","    # Boolean columns (treated as categorical)\n","    'high_value_purchase', 'high_value_quantity',\n","    # Reclassified time-related columns\n","    'month_of_year', 'week_of_year', 'transaction_month', 'transaction_year',\n","    'product_expiry_date_month', 'product_expiry_date_year', 'product_manufacture_month',\n","    'product_manufacture_year', 'promotion_end_month', 'last_purchase_month',\n","    'promotion_start_month',\n","    # Reclassified zip code columns\n","    'customer_zip_code', 'store_zip_code'\n","]\n","# Filter columns that exist in train_data\n","categorical_columns = [col for col in categorical_columns if col in train_data.columns]\n","\n","# Function to calculate Cramér's V with safeguard\n","def cramers_v(confusion_matrix):\n","    chi2 = chi2_contingency(confusion_matrix)[0]\n","    n = confusion_matrix.sum()\n","    r, k = confusion_matrix.shape\n","    if min(r, k) == 1 or chi2 == 0:  # Safeguard for edge cases\n","        return 0\n","    return min(1.0, np.sqrt(chi2 / (n * (min(r, k) - 1))))  # Cap at 1.0\n","\n","# Dictionary to store results\n","results = {}\n","\n","# Perform analysis for each categorical variable\n","for column in categorical_columns:\n","    # Drop rows with NaN in the categorical variable or cluster column\n","    subset = train_data[[column, 'cluster']].dropna()\n","\n","    # Create contingency table\n","    contingency_table = pd.crosstab(subset[column], subset['cluster'])\n","\n","    # Calculate Chi-square\n","    chi2, p_value, dof, expected = chi2_contingency(contingency_table)\n","\n","    # Calculate Cramér's V\n","    cramer_v = cramers_v(contingency_table.values)\n","\n","    # Store results\n","    results[column] = {\n","        'Chi2': chi2,\n","        'p-value': p_value,\n","        'Cramér\\'s V': cramer_v,\n","        'Strength': 'Weak' if cramer_v < 0.1 else\n","                   'Moderate' if cramer_v < 0.3 else\n","                   'Strong'\n","    }\n","\n","# Create a DataFrame from results\n","results_df = pd.DataFrame(results).T\n","results_df = results_df[['Chi2', 'p-value', 'Cramér\\'s V', 'Strength']]\n","\n","# Sort by p-value in ascending order\n","results_df = results_df.sort_values('p-value', ascending=True)\n","\n","# Format and print output\n","pd.set_option('display.float_format', '{:.4f}'.format)\n","print(\"\\nStatistical Analysis between 'cluster' and categorical variables (Training Set):\")\n","print(\"---------------------------------------------------------------------------\")\n","print(results_df)\n","\n","# Save to CSV\n","results_df.to_csv(\"chi_square_results.csv\", index=True)\n","\n","# Print interpretation guide\n","print(\"\\nInterpretation Guide:\")\n","print(\"Cramér's V / Strength:\")\n","print(\"< 0.1: Weak association\")\n","print(\"0.1 - 0.3: Moderate association\")\n","print(\"> 0.3: Strong association\")\n","print(\"p-value < 0.05 indicates statistical significance\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LrLOZFUI4Z6-","executionInfo":{"status":"ok","timestamp":1750189870574,"user_tz":240,"elapsed":1739,"user":{"displayName":"Jivko Uzoff","userId":"13489242111202320155"}},"outputId":"804e88e3-12c1-410a-b773-5b58dd4d292c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Statistical Analysis between 'cluster' and categorical variables (Training Set):\n","---------------------------------------------------------------------------\n","                                Chi2 p-value Cramér's V  Strength\n","last_purchase_month         978.3785  0.0000     0.1526  Moderate\n","promotion_end_month         905.7369  0.0000     0.1469  Moderate\n","product_manufacture_month   856.1031  0.0000     0.1428  Moderate\n","month_of_year               533.5187  0.0000     0.1127  Moderate\n","product_expiry_date_year    327.2391  0.0000     0.1248  Moderate\n","product_manufacture_year    317.0642  0.0000     0.1229  Moderate\n","transaction_year            204.1048  0.0000     0.0986      Weak\n","product_expiry_date_month   245.4609  0.0000     0.0764      Weak\n","transaction_month           226.4064  0.0000     0.0734      Weak\n","high_value_purchase         156.3924  0.0000     0.0863      Weak\n","week_of_year                379.7695  0.0000     0.0951      Weak\n","promotion_start_month       156.1203  0.0000     0.0610      Weak\n","day_of_week                  30.7128  0.0022     0.0270      Weak\n","purchase_frequency           18.6150  0.0049     0.0211      Weak\n","customer_city                17.5092  0.0076     0.0204      Weak\n","gender                        9.9219  0.0418     0.0154      Weak\n","weekend                       6.2305  0.0444     0.0172      Weak\n","store_state                   9.3804  0.0523     0.0149      Weak\n","email_subscriptions           5.4718  0.0648     0.0161      Weak\n","store_location               11.2599  0.0807     0.0164      Weak\n","high_value_quantity           4.9015  0.0862     0.0153      Weak\n","payment_method                9.2874  0.1580     0.0149      Weak\n","education_level               9.1594  0.1648     0.0148      Weak\n","season                        8.9637  0.1756     0.0146      Weak\n","marital_status                5.7983  0.2147     0.0117      Weak\n","customer_state                4.7865  0.3099     0.0107      Weak\n","occupation                    6.7594  0.3437     0.0127      Weak\n","product_material              6.5986  0.3596     0.0125      Weak\n","loyalty_program               1.9469  0.3778     0.0096      Weak\n","promotion_channel             4.2032  0.3792     0.0100      Weak\n","holiday_season                1.9188  0.3831     0.0096      Weak\n","promotion_type                3.6721  0.4522     0.0094      Weak\n","store_zip_code            37489.4944  0.4677     0.9448    Strong\n","product_brand                 3.4504  0.4855     0.0091      Weak\n","promotion_effectiveness       3.2973  0.5094     0.0089      Weak\n","store_city                    5.1450  0.5254     0.0111      Weak\n","product_category              6.9352  0.5436     0.0129      Weak\n","product_size                  3.0659  0.5469     0.0085      Weak\n","customer_zip_code         37326.1480  0.6027     0.9427    Strong\n","income_bracket                2.6204  0.6232     0.0079      Weak\n","social_media_engagement       1.7789  0.7763     0.0065      Weak\n","promotion_target_audience     0.4901  0.7827     0.0048      Weak\n","product_name                  3.0309  0.8050     0.0085      Weak\n","app_usage                     1.1436  0.8873     0.0052      Weak\n","preferred_store               1.9665  0.9227     0.0068      Weak\n","product_color                 2.8484  0.9435     0.0082      Weak\n","churned                       0.0397  0.9803     0.0014      Weak\n","\n","Interpretation Guide:\n","Cramér's V / Strength:\n","< 0.1: Weak association\n","0.1 - 0.3: Moderate association\n","> 0.3: Strong association\n","p-value < 0.05 indicates statistical significance\n"]}]},{"cell_type":"code","source":["'''\n","Excluded: Single-value columns (promotion_end_year, last_purchase_year, promotion_start_year) are not included, as they lack variability and are unsuitable for Chi-Square tests.\n","'''"],"metadata":{"id":"9S9wlTz_Bsx8","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1750189870576,"user_tz":240,"elapsed":10,"user":{"displayName":"Jivko Uzoff","userId":"13489242111202320155"}},"outputId":"766e93be-95ab-404c-e928-24534a3423f3"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nExcluded: Single-value columns (promotion_end_year, last_purchase_year, promotion_start_year) are not included, as they lack variability and are unsuitable for Chi-Square tests.\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["## Normality Check - For Numeric Attributes"],"metadata":{"id":"qqMtacEk5BE8"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from scipy.stats import anderson, skew, kurtosis\n","\n","# Verify train_data is loaded and not empty\n","if 'train_data' not in globals() or train_data.empty:\n","    raise ValueError(\"train_data is not loaded or is empty! Please ensure train_data is loaded.\")\n","\n","# Updated list of numeric columns based on provided dataset\n","numeric_columns = [\n","    'age', 'membership_years', 'number_of_children', 'quantity', 'transaction_hour',\n","    'online_purchases', 'in_store_purchases', 'total_returned_items', 'total_transactions',\n","    'total_items_purchased', 'product_review_count', 'product_stock', 'product_shelf_life',\n","    'customer_support_calls', 'website_visits', 'days_since_last_purchase',\n","    'unit_price', 'discount_applied', 'avg_purchase_value', 'avg_discount_used',\n","    'avg_items_per_transaction', 'avg_transaction_value', 'total_returned_value',\n","    'total_sales', 'total_discounts_received', 'avg_spent_per_category',\n","    'max_single_purchase_value', 'min_single_purchase_value', 'product_rating',\n","    'product_return_rate', 'product_weight', 'distance_to_store', 'discount_sensitivity',\n","    'avg_discount_per_transaction', 'CLV', 'total_return_rate'\n","]\n","\n","# Filter columns that exist in train_data\n","numeric_columns = [col for col in numeric_columns if col in train_data.columns]\n","\n","# Dictionary to store Anderson-Darling test results\n","normality_results = {}\n","\n","# Perform Anderson-Darling test and calculate skewness/kurtosis on train_data\n","for column in numeric_columns:\n","    # Extract training data for the column, drop NaNs\n","    data_values = train_data[column].dropna()\n","\n","    # Anderson-Darling test\n","    result = anderson(data_values, dist='norm')\n","    statistic = result.statistic\n","    critical_values = result.critical_values\n","    significance_levels = result.significance_level  # [15%, 10%, 5%, 2.5%, 1%]\n","\n","    # Determine normality at 5% significance level\n","    cv_5_percent = critical_values[2]  # Index 2 corresponds to 5%\n","    is_normal = 'Yes' if statistic < cv_5_percent else 'No'\n","\n","    # Skewness and Kurtosis\n","    skewness = skew(data_values)\n","    kurt = kurtosis(data_values)  # Excess kurtosis (normal = 0)\n","\n","    # Approximate p-value (lowest significance level where test statistic is greater than critical value)\n","    # If statistic < all critical values, p-value ~ 1.0 (normal)\n","    p_approx = 1.0\n","    for sl, cv in zip(significance_levels, critical_values):\n","        if statistic > cv:\n","            p_approx = sl / 100\n","            break\n","\n","    # Store results\n","    normality_results[column] = {\n","        'AD Statistic': statistic,\n","        'Critical Value (5%)': cv_5_percent,\n","        'p-value (approx)': p_approx,\n","        'Skewness': skewness,\n","        'Kurtosis': kurt,\n","        'Normal (5%)': is_normal\n","    }\n","\n","# Create a DataFrame from results\n","results_df = pd.DataFrame(normality_results).T\n","results_df = results_df[['AD Statistic', 'Critical Value (5%)', 'p-value (approx)', 'Skewness', 'Kurtosis', 'Normal (5%)']]\n","\n","# Format and print output\n","pd.set_option('display.float_format', '{:.4f}'.format)\n","print(f\"\\nAnderson-Darling Normality Test Results for Numeric Attributes (Training Set: {len(train_data)} rows):\")\n","print(\"-------------------------------------------------------------------------------------\")\n","print(results_df)\n","\n","# Save to CSV\n","results_df.to_csv(\"normality_results.csv\", index=True)\n","\n","# Interpretation guide\n","print(\"\\nInterpretation Guide:\")\n","print(\"AD Statistic < Critical Value (5%): Data is likely normal at 5% significance level\")\n","print(\"AD Statistic > Critical Value (5%): Data is likely non-normal at 5% significance level\")\n","print(\"p-value (approx): Approximate significance level where normality is rejected\")\n","print(\"Skewness: ~0 is symmetric, >0 is right-skewed, <0 is left-skewed\")\n","print(\"Kurtosis: ~0 is normal, >0 is heavy-tailed, <0 is light-tailed\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kBzzZ8Wz5mVm","executionInfo":{"status":"ok","timestamp":1750189870763,"user_tz":240,"elapsed":191,"user":{"displayName":"Jivko Uzoff","userId":"13489242111202320155"}},"outputId":"503dacc3-09bf-4b52-e947-ddf94255289e"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Anderson-Darling Normality Test Results for Numeric Attributes (Training Set: 21000 rows):\n","-------------------------------------------------------------------------------------\n","                          AD Statistic Critical Value (5%) p-value (approx)  \\\n","age                           229.0425              0.7870           0.1500   \n","membership_years              360.0211              0.7870           0.1500   \n","number_of_children            752.5525              0.7870           0.1500   \n","quantity                      394.5519              0.7870           0.1500   \n","transaction_hour              256.8279              0.7870           0.1500   \n","online_purchases              232.1638              0.7870           0.1500   \n","in_store_purchases            232.8415              0.7870           0.1500   \n","total_returned_items          366.8833              0.7870           0.1500   \n","total_transactions            240.3177              0.7870           0.1500   \n","total_items_purchased         220.9900              0.7870           0.1500   \n","product_review_count          241.7396              0.7870           0.1500   \n","product_stock                 237.8677              0.7870           0.1500   \n","product_shelf_life            232.2757              0.7870           0.1500   \n","customer_support_calls        262.9538              0.7870           0.1500   \n","website_visits                231.1803              0.7870           0.1500   \n","days_since_last_purchase      239.6531              0.7870           0.1500   \n","unit_price                    238.6015              0.7870           0.1500   \n","discount_applied              241.1617              0.7870           0.1500   \n","avg_purchase_value            231.9224              0.7870           0.1500   \n","avg_discount_used             239.7511              0.7870           0.1500   \n","avg_items_per_transaction     231.9464              0.7870           0.1500   \n","avg_transaction_value         237.3781              0.7870           0.1500   \n","total_returned_value          230.0126              0.7870           0.1500   \n","total_discounts_received      237.2260              0.7870           0.1500   \n","avg_spent_per_category        236.5877              0.7870           0.1500   \n","max_single_purchase_value     227.6064              0.7870           0.1500   \n","min_single_purchase_value     239.9441              0.7870           0.1500   \n","product_rating                235.6806              0.7870           0.1500   \n","product_return_rate           241.7251              0.7870           0.1500   \n","product_weight                228.7624              0.7870           0.1500   \n","distance_to_store             230.0580              0.7870           0.1500   \n","\n","                          Skewness Kurtosis Normal (5%)  \n","age                        -0.0099  -1.1901          No  \n","membership_years           -0.0042  -1.2210          No  \n","number_of_children          0.0161  -1.2974          No  \n","quantity                    0.0010  -1.2322          No  \n","transaction_hour            0.0052  -1.2049          No  \n","online_purchases            0.0004  -1.1969          No  \n","in_store_purchases          0.0099  -1.1974          No  \n","total_returned_items        0.0131  -1.2292          No  \n","total_transactions          0.0007  -1.2070          No  \n","total_items_purchased      -0.0069  -1.1838          No  \n","product_review_count        0.0104  -1.2097          No  \n","product_stock               0.0055  -1.2039          No  \n","product_shelf_life         -0.0072  -1.1980          No  \n","customer_support_calls      0.0120  -1.2023          No  \n","website_visits             -0.0048  -1.1956          No  \n","days_since_last_purchase    0.0002  -1.2075          No  \n","unit_price                  0.0107  -1.2056          No  \n","discount_applied            0.0064  -1.2038          No  \n","avg_purchase_value          0.0071  -1.1978          No  \n","avg_discount_used          -0.0181  -1.2014          No  \n","avg_items_per_transaction  -0.0058  -1.1978          No  \n","avg_transaction_value      -0.0137  -1.2040          No  \n","total_returned_value       -0.0094  -1.1954          No  \n","total_discounts_received    0.0018  -1.2046          No  \n","avg_spent_per_category     -0.0063  -1.2037          No  \n","max_single_purchase_value  -0.0112  -1.1921          No  \n","min_single_purchase_value  -0.0114  -1.2075          No  \n","product_rating             -0.0016  -1.1938          No  \n","product_return_rate        -0.0028  -1.2046          No  \n","product_weight              0.0004  -1.1938          No  \n","distance_to_store          -0.0011  -1.1956          No  \n","\n","Interpretation Guide:\n","AD Statistic < Critical Value (5%): Data is likely normal at 5% significance level\n","AD Statistic > Critical Value (5%): Data is likely non-normal at 5% significance level\n","p-value (approx): Approximate significance level where normality is rejected\n","Skewness: ~0 is symmetric, >0 is right-skewed, <0 is left-skewed\n","Kurtosis: ~0 is normal, >0 is heavy-tailed, <0 is light-tailed\n"]}]},{"cell_type":"code","source":["'''\n","Identifier Columns: customer_id, transaction_id, product_id, promotion_id,  (identifiers, not suitable for Kruskal-Wallis or normality tests).\n","'''"],"metadata":{"id":"y4rud4pTUSn0","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1750189870810,"user_tz":240,"elapsed":44,"user":{"displayName":"Jivko Uzoff","userId":"13489242111202320155"}},"outputId":"2eda4724-4db8-4b01-ef4d-1795e6655248"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nIdentifier Columns: customer_id, transaction_id, product_id, promotion_id,  (identifiers, not suitable for Kruskal-Wallis or normality tests).\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["## Kruskal-Wallis Test"],"metadata":{"id":"WWISU8dy50qV"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from scipy.stats import kruskal\n","\n","# Verify train_data is loaded and not empty\n","if 'train_data' not in globals() or train_data.empty:\n","    raise ValueError(\"train_data is not loaded or is empty! Please ensure train_data is loaded.\")\n","\n","# Verify 'cluster' column exists and its values\n","if 'cluster' not in train_data.columns:\n","    raise ValueError(\"Column 'cluster' not found in train_data! Available columns: \" + str(list(train_data.columns)))\n","print(\"Unique values in 'cluster':\", train_data['cluster'].unique())\n","print(\"Cluster sizes:\", train_data['cluster'].value_counts().to_dict())\n","\n","# Updated list of numeric columns based on provided dataset\n","numeric_columns = [\n","    'age', 'membership_years', 'number_of_children', 'quantity', 'transaction_hour',\n","    'online_purchases', 'in_store_purchases', 'total_returned_items', 'total_transactions',\n","    'total_items_purchased', 'product_review_count', 'product_stock', 'product_shelf_life',\n","    'customer_support_calls', 'website_visits', 'days_since_last_purchase',\n","    'unit_price', 'discount_applied', 'avg_purchase_value', 'avg_discount_used',\n","    'avg_items_per_transaction', 'avg_transaction_value', 'total_returned_value',\n","    'total_sales', 'total_discounts_received', 'avg_spent_per_category',\n","    'max_single_purchase_value', 'min_single_purchase_value', 'product_rating',\n","    'product_return_rate', 'product_weight', 'distance_to_store', 'discount_sensitivity',\n","    'avg_discount_per_transaction', 'CLV', 'total_return_rate'\n","]\n","\n","# Filter columns that exist in train_data\n","numeric_columns = [col for col in numeric_columns if col in train_data.columns]\n","\n","# Total sample size and number of clusters\n","n = len(train_data)\n","k = len(train_data['cluster'].unique())  # Dynamic number of clusters\n","\n","# Dictionary to store Kruskal-Wallis results\n","kw_results = {}\n","\n","# Perform Kruskal-Wallis test for each numeric attribute\n","for column in numeric_columns:\n","    # Split data by cluster\n","    groups = [train_data[train_data['cluster'] == c][column].dropna() for c in train_data['cluster'].unique()]\n","\n","    # Ensure all groups have data\n","    if all(len(group) > 0 for group in groups):\n","        # Kruskal-Wallis test\n","        h_stat, p_value = kruskal(*groups)\n","\n","        # Calculate eta-squared\n","        eta_squared = (h_stat - k + 1) / (n - k) if n > k else 0\n","\n","        # Store results\n","        kw_results[column] = {\n","            'H Statistic': h_stat,\n","            'p-value': p_value,\n","            'Eta-Squared': eta_squared\n","        }\n","    else:\n","        print(f\"Skipping {column}: One or more cluster groups are empty {[len(g) for g in groups]}.\")\n","\n","# Check if results are populated\n","if not kw_results:\n","    raise ValueError(\"No results were generated! Check 'cluster' values or data integrity.\")\n","\n","# Create a DataFrame from results\n","results_df = pd.DataFrame(kw_results).T\n","results_df = results_df[['H Statistic', 'p-value', 'Eta-Squared']]\n","\n","# Sort by p-value (most significant first)\n","results_df = results_df.sort_values('p-value', ascending=True)\n","\n","# Format and save the output\n","pd.set_option('display.float_format', '{:.4f}'.format)\n","print(f\"\\nKruskal-Wallis Test Results for Numeric Attributes Across Clusters (Training Set, {k} clusters):\")\n","print(\"------------------------------------------------------------------------------------\")\n","print(results_df)\n","results_df.to_csv(\"kruskal_wallis_results.csv\", index=True)\n","\n","# Interpretation guide\n","print(\"\\nInterpretation Guide:\")\n","print(\"p-value < 0.05: Significant difference in medians across clusters at 5% level\")\n","print(\"Eta-Squared (Effect Size):\")\n","print(\"< 0.01: Very small effect\")\n","print(\"0.01 - 0.06: Small effect\")\n","print(\"0.06 - 0.14: Medium effect\")\n","print(\"> 0.14: Large effect\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JwPu2Nqo54WH","executionInfo":{"status":"ok","timestamp":1750189871257,"user_tz":240,"elapsed":450,"user":{"displayName":"Jivko Uzoff","userId":"13489242111202320155"}},"outputId":"50deb4bd-9bb8-4be8-a1e2-6f7a1a73df92"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Unique values in 'cluster': [1 2 0]\n","Cluster sizes: {1: 7202, 0: 6913, 2: 6885}\n","\n","Kruskal-Wallis Test Results for Numeric Attributes Across Clusters (Training Set, 3 clusters):\n","------------------------------------------------------------------------------------\n","                           H Statistic  p-value  Eta-Squared\n","customer_support_calls       1606.3266   0.0000       0.0764\n","product_review_count         1625.4439   0.0000       0.0773\n","days_since_last_purchase     1404.1092   0.0000       0.0668\n","online_purchases             1229.5382   0.0000       0.0585\n","distance_to_store            1143.5060   0.0000       0.0544\n","product_rating                872.4218   0.0000       0.0415\n","total_transactions            849.4417   0.0000       0.0404\n","product_weight                837.8836   0.0000       0.0398\n","total_items_purchased         787.9813   0.0000       0.0374\n","unit_price                    780.0219   0.0000       0.0371\n","total_returned_value          667.8526   0.0000       0.0317\n","membership_years              543.4436   0.0000       0.0258\n","discount_applied              454.5996   0.0000       0.0216\n","avg_discount_used             406.0273   0.0000       0.0192\n","product_shelf_life            405.1771   0.0000       0.0192\n","total_returned_items          403.7131   0.0000       0.0191\n","transaction_hour              394.1256   0.0000       0.0187\n","min_single_purchase_value     291.7550   0.0000       0.0138\n","number_of_children            278.1710   0.0000       0.0132\n","product_stock                 259.6097   0.0000       0.0123\n","avg_purchase_value            229.3148   0.0000       0.0108\n","avg_items_per_transaction     191.2900   0.0000       0.0090\n","website_visits                161.9345   0.0000       0.0076\n","age                           130.6204   0.0000       0.0061\n","max_single_purchase_value     105.2475   0.0000       0.0049\n","avg_spent_per_category        100.0810   0.0000       0.0047\n","total_discounts_received       65.1241   0.0000       0.0030\n","product_return_rate            53.5930   0.0000       0.0025\n","avg_transaction_value          32.4086   0.0000       0.0014\n","in_store_purchases             13.7339   0.0010       0.0006\n","quantity                        0.2521   0.8816      -0.0001\n","\n","Interpretation Guide:\n","p-value < 0.05: Significant difference in medians across clusters at 5% level\n","Eta-Squared (Effect Size):\n","< 0.01: Very small effect\n","0.01 - 0.06: Small effect\n","0.06 - 0.14: Medium effect\n","> 0.14: Large effect\n"]}]},{"cell_type":"code","source":["'''\n","Identifier Columns: customer_id, transaction_id, product_id, promotion_id,  (identifiers, not suitable for Kruskal-Wallis or normality tests).\n","'''"],"metadata":{"id":"T4NDsgOTUGXI","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1750189871299,"user_tz":240,"elapsed":40,"user":{"displayName":"Jivko Uzoff","userId":"13489242111202320155"}},"outputId":"f6aeedc0-a252-4c3d-b104-ea0bc9850bc4"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nIdentifier Columns: customer_id, transaction_id, product_id, promotion_id,  (identifiers, not suitable for Kruskal-Wallis or normality tests).\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":8}]}]}